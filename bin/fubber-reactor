#!/usr/bin/php
<?php
/**
*	This is the script that starts up the Fubber Reactor server and monitors that it has not crashed.
*/

// Find the vendor/autoload.php file. The folder that has the vendor/ folder becomes the root folder.

$cwd = __DIR__;
while(!file_exists($cwd.'/vendor/autoload.php')) {
	$newCwd = dirname($cwd);
	if($newCwd == $cwd) {
		die("Unable to find vendor/autoload.php. The folder containing the vendor/ folder will act as the root folder for everything.\n");
	}
	$cwd = $newCwd;	
}
chdir($cwd);

if(!file_exists('fubber-reactor.json'))
	$fubberReactorConfig = new stdClass();
else
	$fubberReactorConfig = json_decode(file_get_contents('fubber-reactor.json'));

if(!is_object($fubberReactorConfig))
	die("Config file must contain a valid json structure.\n");

if(isset($fubberReactorConfig->init)) {
	require($fubberReactorConfig->init);
} else {
	require('vendor/autoload.php');
}

echo "Fubber Reactor Starting: ";
if(has_inotify()) {
	$inotifyPid = spawn_inotify();
	echo "[file monitor]";
}
$serverPid = spawn_server();
echo "[server]\n";

while(TRUE) {
	usleep(100000);
	$result = pcntl_waitpid($serverPid, $status, WNOHANG);
	if($result == -1 || $result > 0) {
		echo "Restarting server (PID=$result)\n";
		$serverPid = spawn_server();
	}
	if(has_inotify()) {
		$result = pcntl_waitpid($inotifyPid, $status, WNOHANG);
		if($result == -1 || $result > 0) {
			echo "Restarting directory watch (PID=$result)\n";
			$inotifyPid = spawn_inotify();
			echo "Killing server (PID=$serverPid)\n";
			posix_kill($serverPid, SIGABRT);
		}
	}
}

function has_inotify() {
	static $result = NULL;
	if($result === NULL)
		$result = file_exists('/usr/bin/inotifywait');
	return $result;
}

function spawn_inotify() {
	$inotifyPid = pcntl_fork();
	if(!$inotifyPid) {
		// Start inotify
		shell_exec("/usr/bin/inotifywait -qq -r -e 'modify,move,create,delete' ./");
		die();
	}
	return $inotifyPid;
}

function spawn_server() {
	global $fubberReactorConfig;
	$serverPid = pcntl_fork();
	if(!$serverPid) {
		new \Fubber\Reactor\Host($fubberReactorConfig);
		die();
	}

	return $serverPid;
}
